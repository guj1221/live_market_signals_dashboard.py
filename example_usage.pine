//@version=5
strategy("Advanced Buy Signals Strategy Example", overlay=true, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// ============================================================================
// STRATEGY PARAMETERS
// ============================================================================
// Risk Management
maxRiskPerTrade = input.float(2.0, "Max Risk Per Trade (%)", minval=0.1, maxval=10.0)
useStopLoss = input.bool(true, "Use Stop Loss")
useTakeProfit = input.bool(true, "Use Take Profit")

// Signal Filters
minSignalStrength = input.int(4, "Minimum Signal Strength", minval=1, maxval=15)
requireVolumeConfirmation = input.bool(true, "Require Volume Confirmation")
requireTrendAlignment = input.bool(true, "Require Trend Alignment")

// ============================================================================
// INCLUDE ADVANCED BUY SIGNALS
// ============================================================================
// Note: This is a simplified version of the main indicator
// For full functionality, use the complete advanced_buy_signals.pine

// RSI
rsiLength = 14
rsi = ta.rsi(close, rsiLength)
rsiOversold = rsi < 30 and rsi > rsi[1]

// MACD
[macdLine, signalLine, histLine] = ta.macd(close, 12, 26, 9)
macdBullishCrossover = ta.crossover(macdLine, signalLine)

// Bollinger Bands
bbLength = 20
bbMult = 2.0
bbMiddle = ta.sma(close, bbLength)
bbStd = ta.stdev(close, bbLength)
bbUpper = bbMiddle + bbMult * bbStd
bbLower = bbMiddle - bbMult * bbStd
bbLowerBounce = close <= bbLower and close > close[1]

// Volume
volumeSMA = ta.sma(volume, 20)
volumeRatio = volume / volumeSMA
isHighVolume = volumeRatio > 1.5

// Moving Averages
emaFast = ta.ema(close, 9)
emaSlow = ta.ema(close, 21)
sma200 = ta.sma(close, 200)
isAbove200SMA = close > sma200
isEMABullish = emaFast > emaSlow

// ============================================================================
// SIGNAL STRENGTH CALCULATION
// ============================================================================
signalStrength = 0

if rsiOversold
    signalStrength := signalStrength + 1
if macdBullishCrossover
    signalStrength := signalStrength + 2
if bbLowerBounce
    signalStrength := signalStrength + 1
if isHighVolume
    signalStrength := signalStrength + 2
if isAbove200SMA
    signalStrength := signalStrength + 1
if isEMABullish
    signalStrength := signalStrength + 1

// ============================================================================
// BUY SIGNAL GENERATION
// ============================================================================
buySignal = signalStrength >= minSignalStrength

// Additional filters
if requireVolumeConfirmation
    buySignal := buySignal and isHighVolume

if requireTrendAlignment
    buySignal := buySignal and isAbove200SMA

// ============================================================================
// ENTRY CONDITIONS
// ============================================================================
longCondition = buySignal and strategy.position_size == 0

// ============================================================================
// EXIT CONDITIONS
// ============================================================================
// Stop Loss and Take Profit
atr = ta.atr(14)
stopLoss = close - (atr * 2)
takeProfit = close + (atr * 4)

// Exit on opposite signal or manual exit
exitLong = strategy.position_size > 0 and (close < stopLoss or close > takeProfit)

// ============================================================================
// STRATEGY EXECUTION
// ============================================================================
if longCondition
    strategy.entry("Long", strategy.long)
    if useStopLoss
        strategy.exit("Exit Long", "Long", stop=stopLoss, limit=takeProfit)

if exitLong
    strategy.close("Long")

// ============================================================================
// PLOTTING
// ============================================================================
// Plot entry and exit points
plotshape(longCondition, "Buy Signal", shape.triangleup, location.belowbar, color.green, size=size.large)
plotshape(exitLong, "Exit Signal", shape.triangledown, location.abovebar, color.red, size=size.large)

// Plot stop loss and take profit levels
plot(strategy.position_size > 0 ? stopLoss : na, "Stop Loss", color=color.red, linewidth=2, style=plot.style_line)
plot(strategy.position_size > 0 ? takeProfit : na, "Take Profit", color=color.green, linewidth=2, style=plot.style_line)

// Plot moving averages
plot(emaFast, "Fast EMA", color=color.blue, linewidth=2)
plot(emaSlow, "Slow EMA", color=color.red, linewidth=2)
plot(sma200, "200 SMA", color=color.yellow, linewidth=3)

// ============================================================================
// STRATEGY PERFORMANCE TABLE
// ============================================================================
if barstate.islast
    var table perfTable = table.new(position.bottom_right, 2, 8, bgcolor=color.white, border_width=1)
    
    table.cell(perfTable, 0, 0, "Strategy Performance", text_color=color.black, bgcolor=color.gray)
    table.cell(perfTable, 1, 0, "", text_color=color.black, bgcolor=color.gray)
    
    table.cell(perfTable, 0, 1, "Total Trades", text_color=color.black, bgcolor=color.gray)
    table.cell(perfTable, 1, 1, str.tostring(strategy.closedtrades), text_color=color.black, bgcolor=color.white)
    
    table.cell(perfTable, 0, 2, "Win Rate", text_color=color.black, bgcolor=color.gray)
    winRate = strategy.closedtrades > 0 ? (strategy.wintrades / strategy.closedtrades) * 100 : 0
    table.cell(perfTable, 1, 2, str.tostring(math.round(winRate, 1)) + "%", text_color=color.black, bgcolor=color.white)
    
    table.cell(perfTable, 0, 3, "Profit Factor", text_color=color.black, bgcolor=color.gray)
    profitFactor = strategy.grossloss != 0 ? strategy.grossprofit / math.abs(strategy.grossloss) : 0
    table.cell(perfTable, 1, 3, str.tostring(math.round(profitFactor, 2)), text_color=color.black, bgcolor=color.white)
    
    table.cell(perfTable, 0, 4, "Max Drawdown", text_color=color.black, bgcolor=color.gray)
    maxDrawdown = strategy.max_drawdown
    table.cell(perfTable, 1, 4, str.tostring(math.round(maxDrawdown, 2)), text_color=color.black, bgcolor=color.white)
    
    table.cell(perfTable, 0, 5, "Current Signal", text_color=color.black, bgcolor=color.gray)
    signalType = buySignal ? "BUY" : "WAIT"
    table.cell(perfTable, 1, 5, signalType, text_color=color.black, bgcolor=color.white)
    
    table.cell(perfTable, 0, 6, "Signal Strength", text_color=color.black, bgcolor=color.gray)
    table.cell(perfTable, 1, 6, str.tostring(signalStrength), text_color=color.black, bgcolor=color.white)
    
    table.cell(perfTable, 0, 7, "Position Size", text_color=color.black, bgcolor=color.gray)
    table.cell(perfTable, 1, 7, str.tostring(strategy.position_size), text_color=color.black, bgcolor=color.white)

// ============================================================================
// ALERTS
// ============================================================================
alertcondition(longCondition, "Buy Signal Alert", "Advanced Buy Signal detected! Signal Strength: {{plot('Signal Strength')}}")
alertcondition(exitLong, "Exit Signal Alert", "Exit signal triggered for long position")